!<arch>
//                                              342       `
100-prime_factor.c/
100-set_string.c/
100-times_table.c/
101-print_number.c/
10-print_triangle.c/
11-print_to_98.c/
2-print_alphabet_x10.c/
3-print_numbers.c/
4-print_most_numbers.c/
5-more_numbers.c/
5-string_toupper.c/
7-print_chessboard.c/
7-print_diagonal.c/
7-print_last_digit.c/
8-print_diagsums.c/
8-print_square.c/
string_toupper.c/

0-isupper.c/    0           0     0     644     505       `
#include "main.h"

/**
 * _isupper - Checks if a character is uppercase
 * @c: The character to be checked
 *
 * Description: This function checks if a character is an uppercase letter.
 * It returns 1 if the character is uppercase, and 0 otherwise.
 *
 * Return: 1 if the character is uppercase, 0 otherwise
 */
int _isupper(int c)
{
	char uppercase;
	int result = 0;

	for (uppercase = 'A'; uppercase <= 'Z'; uppercase++)
	{
		if (c == uppercase)
		{
			result = 1;
			break;
		}
	}

	return result;
}


0-main.c/       0           0     0     644     947       `
#include "main.h"
#include <stdio.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
        unsigned int i;

        i = 0;
        while (i < size)
        {
                if (i % 10)
                {
                        printf(" ");
                }
                if (!(i % 10) && i)
                {
                        printf("\n");
                }
                printf("0x%02x", buffer[i]);
                i++;
        }
        printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char buffer[98] = {0x00};

    simple_print_buffer(buffer, 98);
    _memset(buffer, 0x01, 95);
    printf("-------------------------------------------------\n");
    simple_print_buffer(buffer, 98);    
    return (0);
}

0-memset.c/     0           0     0     644     339       `
#include "main.h"
#include <string.h>
/**
 * _memset - Fills memory with a constant byte.
 * @s: Pointer to the memory area to be filled.
 * @b: Value to be set.
 * @n: Number of bytes to be filled.
 *
 * Return: Pointer to the filled memory area.
 */
char *_memset(char *s, char b, unsigned int n)
{
	s = memset(s, b, n);
	return (s);
}


0-putchar.c/    0           0     0     644     328       `
#include <stdio.h>

/**
 * main - Entry point
 *
 * Description: Prints the character '_' followed by the word 'putchar'
 *
 * Return: Always 0 (Success)
 */
int main(void)
{
	putchar('_');
	putchar('p');
	putchar('u');
	putchar('t');
	putchar('c');
	putchar('h');
	putchar('a');
	putchar('r');
	putchar('\n');

	return (0);
}

0-strcat.c/     0           0     0     644     337       `
#include "main.h"
#include <string.h>

/**
 * _strcat - Concatenates two strings.
 * @dest: The string to which @src will be appended.
 * @src: The string that will be appended to @dest.
 *
 * Return: Pointer to the resulting concatenated string.
 */
char *_strcat(char *dest, char *src)
{
		dest = strcat(dest, src);
		return (dest);
}

100-main.c/     0           0     0     644     279       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s0 = "Bob Dylan";
    char *s1 = "Robert Allen";

    printf("%s, %s\n", s0, s1);
    set_string(&s1, s0);
    printf("%s, %s\n", s0, s1);
    return (0);
}

/0              0           0     0     644     438       `
#include <stdio.h>

/**
 * main - Prints the largest prime factor of 612852475143.
 *
 * Return: 0 on success.
 */
int main(void)
{
	unsigned long inputNumber = 612852475143;
	unsigned long currentDivisor = 2;

	while (currentDivisor < inputNumber)
	{
		if (inputNumber % currentDivisor == 0)
		{
			inputNumber /= currentDivisor;
			currentDivisor = 2;
		}
		else
			currentDivisor++;
	}

	printf("%lu\n", inputNumber);

	return (0);
}

/20             0           0     0     644     196       `
#include "main.h"
/**
 * set_string - sets value of a pointer to a character
 * @s : pointer
 * @to : pointer to the variable
 * Return: void
 */
void set_string(char **s, char *to)
{
	*s = to;
}
/38             0           0     0     644     1950      `
#include "main.h"

/**
 * print_times_table - Prints the multiplication table up to the specified number.
 * @n: The number specifying the table limit.
 *
 * Description: This function prints a multiplication table up to the given number.
 *              It uses the _putchar function to output characters.
 *              The table is formatted with appropriate spacing and commas.
 */
void print_times_table(int n)
{
	int x, y;

	for (x = 0; x <= n; x++)
	{
		for (y = 0; y <= n; y++)
		{
			int product = x * y;

			if (product < 10)
			{
				_putchar(' ');
				_putchar(product + '0');
			}
			else if (product >= 10 && product <= 99)
			{
				int tens = product / 10;
				int ones = product % 10;

				_putchar(tens + '0');
				_putchar(ones + '0');
			}
			else if (product >= 1000)
			{
				int th = product / 1000;
				int hund = (product / 100) % 10;
				int tens = (product / 10) % 10;
				int ones = product % 10;

				_putchar(th + '0');
				_putchar(hund + '0');
				_putchar(tens + '0');
				_putchar(ones + '0');
			}
			
                        else if (product >= 10000)
                        {
				int tenth = product / 10000;
                                int th = product / 1000;
                                int hund = (product / 100) % 10;
                                int tens = (product / 10) % 10;
                                int ones = product % 10;
				_putchar(tenth + '0');

                                _putchar(th + '0');
                                _putchar(hund + '0');
                                _putchar(tens + '0');
                                _putchar(ones + '0');
                        }
			else
			{
				int hund = (product / 100) % 10;
				int tens = (product / 10) % 10;
				int ones = product % 10;

				_putchar(hund + '0');
				_putchar(tens + '0');
				_putchar(ones + '0');
			}

			if (y != n)
			{
				_putchar(',');
				_putchar(' ');
			}
		}

		_putchar('\n');
	}
}

/57             0           0     0     644     154       `
#include "main.h"
void print_number(int n)
{
	int x,y,z;
	if (n < 0)
	{
		n *= -1;
		_putchar('-');
	}
	x =1;
	while (n > 0 )
	{
		n /= 10;
		x++;
	}


}
10-add.c/       0           0     0     644     194       `
#include "main.h"

/**
 * add - Adds two integers.
 * @x: The first integer.
 * @y: The second integer.
 *
 * Return: The sum of @x and @y.
 */
int add(int x, int y)
{
	x += y;
	return (x);
}


10-main.c/      0           0     0     644     185       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int n;

    n = add(89, 9);
    printf("%d\n", n);
    return (0);
}

/77             0           0     0     644     653       `
#include "main.h"

/**
 * print_triangle - Prints a triangle made of '#' characters
 * @size: Size of the triangle
 *
 * Description: This function prints a triangle made of '#' characters.
 * The size parameter determines the number of lines in the triangle.
 * If size is 0 or negative, it prints a new line.
 */
void print_triangle(int size)
{
	if (size > 0)
	{
		int row, column, numSpaces = size - 1;

		for (row = 0; row < size; row++)
		{
			for (column = 0; column < size; column++)
			{
				if (column < numSpaces)
					_putchar(' ');
				else
					_putchar('#');
			}
			numSpaces--;
			_putchar('\n');
		}
	}
	else
	{
		_putchar('\n');
	}
}


11-main.c/      0           0     0     644     218       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    print_to_98(0);
    print_to_98(98);
    print_to_98(111);
    print_to_98(81);
    print_to_98(-10);
    return (0);
}

/98             0           0     0     644     661       `
#include "main.h"

/**
 * print_to_98 - Prints all numbers from a given number to 98.
 * @m: The starting number.
 *
 * Description: This function prints all numbers starting from @m up to 98.
 * If @m is greater than 98, it will print in descending order.
 */
void print_to_98(int m)
{
	int n = m;

	if (n < 98)
	{
		while (n <= 98)
		{
			_putchar(n / 10 + '0');
			_putchar(n % 10 + '0');

			if (n != 98)
			{
				_putchar(',');
				_putchar(' ');
			}

			n++;
		}
	}
	else
	{
		while (n >= 98)
		{
			_putchar(n / 10 + '0');
			_putchar(n % 10 + '0');

			if (n != 98)
			{
				_putchar(',');
				_putchar(' ');
			}

			n--;
		}
	}

	_putchar('\n');
}



1-alphabet.c/   0           0     0     644     231       `
#include "main.h"

/**
 * print_alphabet - Prints the alphabet from 'a' to 'z'
 *
 * Return: void
 */
void print_alphabet(void)
{
	char alpha;

	for (alpha = 'a'; alpha <= 'z'; alpha++)
	{
		_putchar(alpha);
	}
	_putchar('\n');
}


1-isdigit.c/    0           0     0     644     264       `
#include "main.h"

/**
 * _isdigit - Checks if a character is a digit
 * @c: The character to be checked
 *
 * Return: 1 if the character is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-main.c/       0           0     0     644     912       `
#include "main.h"
#include <stdio.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
    unsigned int i;

    i = 0;
    while (i < size)
    {
        if (i % 10)
        {
            printf(" ");
        }
        if (!(i % 10) && i)
        {
            printf("\n");
        }
        printf("0x%02x", buffer[i]);
        i++;
    }
    printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char buffer[98] = {0};
    char buffer2[98] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

    simple_print_buffer(buffer, 98);
    _memcpy(buffer + 50, buffer2, 10);
    printf("-------------------------------------------------\n");
    simple_print_buffer(buffer, 98);    
    return (0);
}
1-memcpy.c/     0           0     0     644     366       `
#include "main.h"
#include <string.h>
/**
 * _memcpy - copies n bytes from src to dest
 * @dest: where n bytes are copied to
 * @src: where n bytes are copied from
 * @n: the number of bytes to be copied
 * Return: dest which is a pointer to the copied bytes
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	dest = memcpy(dest, src, n);
	return (dest);
}
1-strncat.c/    0           0     0     644     599       `
#include "main.h"
#include <string.h>

/**
 * _strncat - Concatenates two strings, up to a maximum of n characters from src.
 * @dest: The destination string to which src will be appended.
 * @src: The source string that will be appended to dest.
 * @n: The maximum number of characters to be appended from src.
 *
 * Return: Pointer to the resulting concatenated string (dest).
 */
char *_strncat(char *dest, char *src, int n)
{
	size_t dest_len = strlen(dest);
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[dest_len + i] = src[i];
	}

	dest[dest_len + i] = '\0';

	return dest;
}


2-main.c/       0           0     0     644     251       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s = "hello";
    char *f;

    f = _strchr(s, 'l');

    if (f != NULL)
    {
        printf("%s\n", f);
    }
    return (0);
}

2-mul.c/        0           0     0     644     192       `
#include "main.h"

/**
 * mul - Multiplies two integers
 * @a: The first integer
 * @b: The second integer
 *
 * Return: The product of a and b
 */
int mul(int a, int b)
{
	return (a * b);
}

/116            0           0     0     644     290       `
#include "main.h"

/**
 * print_alphabet_x10 - Prints the alphabet from 'a' to 'z' ten times
 *
 * Return: void
 */
void print_alphabet_x10(void)
{
	int times = 0;

	while (times < 10)
	{
		char a;

		for (a = 'a'; a <= 'z'; a++)
		{
			_putchar(a);
		}

		_putchar('\n');
		times++;
	}
}

2-strchr.c/     0           0     0     644     334       `
#include "main.h"
#include <string.h>
/**
 * _strchr - returns a pointer with the first occurence of c in a string
 * @s : pointer to the string
 * @c : the character being checked for in a string
 * Return: s which is a pointer to the first ocuur of c in string
 */
char *_strchr(char *s, char c)
{
	s = strchr(s, c);
	return (s);
}
2-strncpy.c/    0           0     0     644     554       `
#include <stddef.h>
#include "main.h"

/**
 * _strncpy - Copies a string, up to a maximum of n characters, from src to dest.
 * @dest: The destination string where src will be copied.
 * @src: The source string to be copied to dest.
 * @n: The maximum number of characters to be copied from src.
 *
 * Return: Pointer to the resulting copied string.
 */
char *_strncpy(char *dest, char *src, int n)
{
    int i;

    for (i = 0; i < n && src[i] != '\0'; i++)
        dest[i] = src[i];

    for (; i < n; i++)
        dest[i] = '\0';

    return dest;
}

3-islower.c/    0           0     0     644     292       `
#include "main.h"

/**
 * _islower - Checks if a character is lowercase.
 * @c: The character to be checked.
 *
 * Return: 1 if @c is lowercase, 0 otherwise.
 */
int _islower(int c)
{
	int result;

	if (c >= 'a' && c <= 'z')
	{
		result = 1;
	}
	else
	{
		result = 0;
	}

	return (result);
}
3-main.c/       0           0     0     644     249       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s = "hello, world";
    char *f = "oleh";
    unsigned int n;

    n = _strspn(s, f);
    printf("%u\n", n);
    return (0);
}

/140            0           0     0     644     183       `
#include "main.h"

/**
 * print_numbers - Prints numbers from 0 to 9
 */
void print_numbers(void)
{
	int x;

	for (x = 0; x <= 9; x++)
	{
		_putchar(x + '0');
	}

	_putchar('\n');
}


3-strcmp.c/     0           0     0     644     394       `
#include <string.h>
#include "main.h"

/**
 * _strcmp - Compares two strings.
 * @s1: The first string to be compared.
 * @s2: The second string to be compared.
 *
 * Return: An integer less than, equal to, or greater than zero if s1 is found,
 * respectively, to be less than, to match, or be greater than s2.
 */
int _strcmp(char *s1, char *s2)
{
    int x = strcmp(s1, s2);
    return x;
}

3-strspn.c/     0           0     0     644     405       `
#include "main.h"
#include <string.h>
/**
 * _strspn - returns the number of bytes of substring containing accept
 * @s : pointer to the string being analyzed
 * @accept : pointer to the chars being searched in the substring
 * Return: s which is the number of bytes of substring containing accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n;

	n = strspn(s, accept);
	return (n);
}

4-isalpha.c/    0           0     0     644     339       `
#include "main.h"

/**
 * _isalpha - Checks if a character is an alphabet letter.
 * @c: The character to be checked.
 *
 * Return: 1 if @c is an alphabet letter, 0 otherwise.
 */
int _isalpha(int c)
{
	int result;

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		result = 1;
	}
	else
	{
		result = 0;
	}

	return (result);
}


4-main.c/       0           0     0     644     279       `
julien@ubuntu:~/0x07$ cat 4-main.c
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s = "hello, world";
    char *f = "world";
    char *t;

    t = _strpbrk(s, f);
    printf("%s\n", t);
    return (0);
}

/159            0           0     0     644     257       `
#include "main.h"

/**
 * print_most_numbers - Prints numbers from 0 to 9, excluding 2 and 4
 */
void print_most_numbers(void)
{
	int x;

	for (x = 0; x <= 9; x++)
	{
		if (x == 2 || x == 4)
		{
			continue;
		}
		_putchar(x + '0');
	}

	_putchar('\n');
}


4-rev_array.c/  0           0     0     644     363       `
#include "main.h"

/**
 * reverse_array - Reverses the elements of an integer array.
 * @a: The array to be reversed.
 * @n: The number of elements in the array.
 */
void reverse_array(int *a, int n)
{
    int x = 0;
    int y = n - 1;

    while (x < y)
    {
        int temp = a[x];
        a[x] = a[y];
        a[y] = temp;
        x++;
        y--;
    }
}


4-strpbrk.c/    0           0     0     644     359       `
#include "main.h"
#include <string.h>

/**
 * _strpbrk - checks the 1st occurence of accept in the string
 * @s : pointer to the string being analyzed
 * @accept : pointer to the chars being searched for in s
 * Return: s which i sa  pointer to the first occurence of accept
 */
char *_strpbrk(char *s, char *accept)
{
	s = strpbrk(s, accept);
	return (s);
}

5-main.c/       0           0     0     644     243       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s = "hello, world";
    char *f = "world";
    char *t;

    t = _strstr(s, f);
    printf("%s\n", t);
    return (0);
}

/183            0           0     0     644     342       `
#include "main.h"

/**
 * more_numbers - Prints numbers from 0 to 14, ten times
 */
void more_numbers(void)
{
	int y = 0;

	while (y < 10)
	{
		int x = 0;

		while (x <= 14)
		{
			if (x > 9)
			{
				_putchar(x / 10 + '0');
				_putchar(x % 10 + '0');
			}
			else
			{
				_putchar(x + '0');
			}

			x++;
		}
		_putchar('\n');
		y++;
	}
}
5-sign.c/       0           0     0     644     350       `
#include "main.h"

/**
 * print_sign - Prints the sign of a number.
 * @n: The number to be checked.
 *
 * Return: 1 if @n is positive, -1 if @n is negative, 0 otherwise.
 */
int print_sign(int n)
{
	if (n == 0)
	{
		_putchar('0');
		return (0);
	}
	else if (n > 0)
	{
		_putchar('+');
		return (1);
	}
	else
	{
		_putchar('-');
		return (-1);
	}
}

/201            0           0     0     644     404       `
#include "main.h"
#include <ctype.h>
#include <string.h>

/**
 * string_toupper - Converts a string to uppercase.
 * @str: The string to be converted.
 *
 * Return: Pointer to the converted string.
 */
char *string_toupper(char *str)
{
        int length = strlen(str);
	int i;
        for ( i = 0; i <= length; i++)
        {
                str[i] = toupper(str[i]);
        }
        return (str);
}

5-strstr.c/     0           0     0     644     338       `
#include "main.h"
#include <string.h>
/**
 * _strstr - checks for the occurence of substring in a string
 * @haystack : string being checked
 * @needle : substring being searched for
 * Return: pointer to occurence of substring
 */
char *_strstr(char *haystack, char *needle)
{
	haystack = strstr(haystack, needle);
	return (haystack);
}
6-abs.c/        0           0     0     644     330       `
#include "main.h"

/**
 * _abs - Computes the absolute value of an integer.
 * @n: The number for which absolute value is to be calculated.
 *
 * Return: The absolute value of @n.
 */
int _abs(int n)
{
	int num;

	if (n == 0)
	{
		return (0);
	}
	else if (n > 0)
	{
		return (n);
	}
	else
	{
		num = n * -1;
		return (num);
	}
}

6-cap_string.c/ 0           0     0     644     673       `
#include <stdio.h>
#include <string.h>
#include <ctype.h>

/**
 * cap_string - Capitalizes the first letter of each word in a string
 *              that follows a specified separator.
 * @str: The input string to be processed.
 *
 * Return: The modified string with capitalized words.
 */
char *cap_string(char *str)
{
	char separators[] = ",.;?!(){} \n";
	char *token;
	int capitalize = 1;

	token = strtok(str, separators);

	while (token != NULL)
	{
		if (capitalize)
		{
			*token = toupper(*token);
			capitalize = 0;
		}

		if (strchr(separators, token[strlen(token) - 1]) != NULL)
		{
			capitalize = 1;
		}

		token = strtok(NULL, separators);
	}

	return str;
}


6-main.c/       0           0     0     644     377       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char str[] = "Expect the best. Prepare for the worst. Capitalize on what comes.\nhello world! hello-world 0123456hello world\thello world.hello world\n";
    char *ptr;

    ptr = cap_string(str);
    printf("%s", ptr);
    printf("%s", str);
    return (0);
}

6-print_line.c/ 0           0     0     644     240       `
#include "main.h"

/**
 * print_line - Prints a line of underscores
 * @n: The number of underscores to print
 */
void print_line(int n)
{
	int x;

	for (x = 0; x <= n; x++)
	{
		if (x > 0)
		{
			_putchar('_');
		}
	}

	_putchar('\n');
}

7-leet.c/       0           0     0     644     548       `
#include "main.h"
#include <string.h>

/**
 * leet - Encodes a string into 1337.
 * @str: The input string to encode.
 *
 * Return: A pointer to the encoded string.
 */
char *leet(char *str)
{
    int i, j;
    char letters[] = "aAeEoOtTlL";
    char leet_numbers[] = "4433007711";

    for (i = 0; str[i] != '\0'; i++)
    {
        for (j = 0; letters[j] != '\0'; j++)
        {
            if (str[i] == letters[j])
            {
                str[i] = leet_numbers[j];
                break;
            }
        }
    }

    return str;
}

7-main.c/       0           0     0     644     591       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char board[8][8] = {
        {'r', 'k', 'b', 'q', 'k', 'b', 'k', 'r'},
        {'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'},
        {'R', 'K', 'B', 'Q', 'K', 'B', 'K', 'R'},
    };
    print_chessboard(board);
    return (0);
}

/221            0           0     0     644     297       `
#include "main.h"
/**
 * print_chessboard - prints an 8 by 8 square
 * @a : pointer to array
 * Return: void
 */
void print_chessboard(char (*a)[8])
{
	int x, y;

	for (x = 0; x < 8; x++)
	{
		for (y = 0; y < 8; y++)
		{
			_putchar(a[x][y]);
			if (y == 7)
			{
				_putchar('\n');
			}
		}
	}
}

/243            0           0     0     644     181       `
#include "main.h"
void print_diagonal(int n)
{
	int x;
	for ( x = 0;x <= n;x++)
	{
		for ( x = 0;x <= n;x++)
		{	
			_putchar(92);
			_putchar('\n');
		}
	/*	_putchar('\n');*/
	}
}

/263            0           0     0     644     419       `
#include "main.h"

/**
 * print_last_digit - Prints the last digit of a number.
 * @x: The number to extract the last digit from.
 *
 * Return: The last digit of @x.
 */
int print_last_digit(int x)
{
	int y;

	if (x > 0)
	{
		y = x % 10;
		_putchar(y + '0');
		return (y);
	}
	else if (x == 0)
	{
		y = x;
		_putchar(y + '0');
		return (y);
	}
	else
	{
		x *= -1;
		y = x % 10;
		_putchar(y + '0');
		return (y);
	}
}


8-24_hours.c/   0           0     0     644     576       `
#include "main.h"

/**
 * jack_bauer - Prints every minute of a 24-hour day.
 *
 * Description: This function prints every minute of a 24-hour day in the
 * format HH:MM. The range of hours is from 00 to 23, and the range of
 * minutes is from 00 to 59.
 */
void jack_bauer(void)
{
	int x, y, x1, x2, y1, y2;

	for (x = 0; x <= 23; x++)
	{
		for (y = 0; y <= 59; y++)
		{
			x1 = x / 10;
			x2 = x % 10;
			y1 = y / 10;
			y2 = y % 10;

			_putchar(x1 + '0');
			_putchar(x2 + '0');
			_putchar(':');
			_putchar(y1 + '0');
			_putchar(y2 + '0');
			_putchar('\n');
		}
	}
}

8-main.c/       0           0     0     644     533       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int c3[3][3] = {
        {0, 1, 5},
        {10, 11, 12},
        {1000, 101, 102},
    };
    int c5[5][5] = {
        {0, 1, 5, 12124, 1234},
        {10, 11, 12, 123521, 12512},
        {1000, 101, 102, 12545, 214543435},
        {100, 1012451, 11102, 12545, 214543435},
        {10, 12401, 10452, 11542545, 1214543435},
    };
    print_diagsums((int *)c3, 3);
    print_diagsums((int *)c5, 5);
    return (0);
}

/285            0           0     0     644     1327      `
#include "main.h"

/**
 * print_diagsums - Prints the sum of the main diagonal and anti-diagonal elements of a square matrix
 * @a: Pointer to the square matrix
 * @size: Size of the square matrix
 *
 * Return: void
 */
void print_diagsums(int *a, int size)
{
	int x, i;
	int diag = 0;
	int diag1 = 0;
        char diag_sum_str[12]; /* Assuming the maximum sum can be represented with 11 digits */
        char diag1_sum_str[12]; /* Assuming the maximum sum can be represented with 11 digits */
        int diag_sum_length = 0;
        int diag1_sum_length = 0;
        int temp = diag;
	
	for (x = 0; x < size; x++)
	{
		diag += a[size * x + x];
		diag1 += a[size * (x + 1) - (x + 1)];
	}
	while (temp > 0)
	{
		diag_sum_str[diag_sum_length++] = '0' + (temp % 10);
		temp /= 10;
	}
	if (diag == 0)
		diag_sum_str[diag_sum_length++] = '0';
	diag_sum_str[diag_sum_length] = '\0';
	temp = diag1;
	while (temp > 0)
	{
		diag1_sum_str[diag1_sum_length++] = '0' + (temp % 10);
		temp /= 10;
	}
	if (diag1 == 0)
		diag1_sum_str[diag1_sum_length++] = '0';
	diag1_sum_str[diag1_sum_length] = '\0';
	for (i = 0; i < diag_sum_length; i++)
		_putchar(diag_sum_str[diag_sum_length - 1 - i]);
	_putchar(',');

	_putchar(' ');

	for (i = 0; i < diag1_sum_length; i++)
		_putchar(diag1_sum_str[diag1_sum_length - 1 - i]);
	_putchar('\n');
}


/305            0           0     0     644     635       `
#include "main.h"

/**
 * print_square - Prints a square of '#' characters
 * @size: The size of the square
 *
 * Description: This function prints a square of '#' characters
 * with the specified size.
 */
void print_square(int size)
{
        int x, y;

        if (size > 0)
        {
                for (x = 0; x < size; x++)
                {
                        for (y = 0; y < size; y++)
                        {
                                _putchar('#');
                        }
                        _putchar('\n');
                }
        }
        else
        {
                _putchar('\n');
        }
}


9-fizz_buzz.c/  0           0     0     644     583       `
#include <stdio.h>

/**
 * main - Entry point of the program
 *
 * Description: Prints numbers from 1 to 100. For multiples of 3, it prints "Fizz".
 * For multiples of 5, it prints "Buzz". For numbers that are multiples of both 3
 * and 5, it prints "FizzBuzz".
 *
 * Return: Always 0 (Success)
 */

int main(void)
{
	int num;

	for (num = 1; num < 100; num++)
	{
		if (num % 3 == 0 && num % 5 == 0)
			printf("FizzBuzz ");
		else if (num % 3 == 0)
			printf("Fizz ");
		else if (num % 5 == 0)
			printf("Buzz ");
		else
			printf("%d ", num);
	}

	printf("Buzz\n");
	return (0);
}


9-main.c/       0           0     0     644     130       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    times_table();
    return (0);
}
9-times_table.c/0           0     0     644     849       `
#include "main.h"
/**
 * times_table - Prints the multiplication table of numbers 0 to 9.
 */
void times_table(void)
{
    int x, y;

    for (x = 0; x <= 9; x++)
    {
        for (y = 0; y <= 9; y++)
        {
            int product = x * y;

            if (product < 10)
            {
                _putchar(' ');
                _putchar(product + '0');
            }
            else
            {
                int tens = product / 10;
                int ones = product % 10;

                _putchar(tens + '0');
                _putchar(ones + '0');
            }

            if (y != 9)  /* Check if it's not the last number in the row */
            {
                _putchar(',');
                _putchar(' ');
            }
        }
        
        /* After each row, we print a new line */
        _putchar('\n');
    }
}


bot.c/          0           0     0     644     278       `
#include <stdio.h>

void multiplication_table()
{
    int i, j;

    for (i = 1; i <= 10; i++)
    {
        for (j = 1; j <= 10; j++)
        {
            printf("%4d", i * j);
        }
        printf("\n");
    }
}

int main()
{
    multiplication_table();

    return 0;
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/323            0           0     0     644     0         `
